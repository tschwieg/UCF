using JuMP
using Ipopt
using CSV
using DataFrames



NumPlanes = 0
PlaneCounts = Dict{Int64,Int64}()
PlaneData = Vector{Vector{Float64}}

function ReadDataProcess( NumPlanes, PlaneCounts, PlaneData )
    #This function is a sin, but it reads the csv generated by Proschan and
    #Outputs the things I want.
    data = CSV.read("Proschan.csv", delim=',',header=["plane","data"] )

    i = 0
    curPlane = data[1,1]
    planecount = 0
    curPlaneIndex = 1

    for i = 1:size(data,1)
        if data[i,1] != curPlane
            PlaneCounts[curPlane] = i - curPlaneIndex
            curPlaneIndex = i
            NumPlanes += 1
            curPlane = data[i,1]
        end
    end
    PlaneCounts[curPlane] = i - curPlaneIndex
    NumPlanes += 1

    PlaneData = Vector{Vector{Float64}}(NumPlanes)
    RealPlaneCounts = Vector{Int64}(NumPlanes)

    planecounter = 1
    for planes in keys(PlaneCounts)
        PlaneData[planecounter] = Vector{Float64}()
        RealPlaneCounts[planecounter] = PlaneCounts[planes]
        PlaneCounts[planes] = planecounter
        planecounter += 1
    end

    for i = 1:size(data,1)
        push!(PlaneData[PlaneCounts[data[i,1]]],abs(data[i,2]))
    end
    return NumPlanes, RealPlaneCounts, PlaneData
end

NumPlanes, PlaneCounts, PlaneData = ReadDataProcess(NumPlanes, PlaneCounts, PlaneData)




m = Model( solver=IpoptSolver())
@variable( m, p, start = 1.0 )
@variable(m, lambda[1:NumPlanes], start = 1 )

@NLobjective( m, Max, sum( (sum( log(p) + log( lambda[i] ) +
                                 (p-1)*log( (PlaneData[i])[j]) -
                                 lambda[i]*((PlaneData[i])[j]^p)
                                 for j = 1:PlaneCounts[i] )) for i = 1:NumPlanes ))
@constraint( m, p >= 0 )
@constraint( m, lambda .>= 0 )

solve(m)

println( getvalue( p ) )
println( getvalue( lambda ))
println( getobjectivevalue( m ) )

for key in keys(PlaneCounts)
    print( key )
    print( ": " )
    print( getvalue( lambda[PlaneCounts[key]] ) )
    print( "\n" )
end
