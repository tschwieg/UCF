
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> data <- read.table( "Galton.dat" )
> 
> sons <- data[data$V4==1,]
> daughters <- data[data$V4==0,]
> fathers <- unique( data[,1:2])
> #fathers <- data[data$V1 %in%  unique(data$V1),]
> 
> summary(sons$V5)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   7.500   9.200   9.234  11.000  19.000 
> sd( sons$V5)
[1] 2.623688
> max( sons$V5 ) - min( sons$V5 )
[1] 19
> IQR( sons$V5 )
[1] 3.5
> 
> summary( daughters$V5 )
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 -4.000   2.500   4.000   4.103   5.500  10.500 
> sd( daughters$V5)
[1] 2.356053
> max( daughters$V5 ) - min( daughters$V5 )
[1] 14.5
> IQR( daughters$V5 )
[1] 3
> 
> pdf( "Fathers.pdf" )
> plot( x=sons$V2,y=sons$V5, xlab="Fathers", ylab="Sons")
> dev.off()
null device 
          1 
> 
> GenerateEDF <- function( depth, frame, start, end ){
+     EDF <- numeric( (end-start)*depth )
+     i <- 0
+     for( i in 1:length( EDF )){
+         EDF[i] <- length( frame[frame<=(start+(i/depth))] ) / length( frame )
+     }
+     EDF
+ }
> 
> 
> NormalKernal <- function( u ){
+     (1/sqrt( 2*pi))*exp( (-1*u^2)/2.0 )
+ }
> 
> GenerateKernalSmoothHistogram <- function( depth, frame, start, end, kernal ){
+     kSmooth <- numeric( (end-start)*depth )
+     i <- 0
+     h <- 1.06*sd(frame)*as.numeric(length(frame))^(-1.0/5.0)
+     for( i in 1:length(kSmooth) ){
+         kSmooth[i] <- 0
+         y <- (start+(i/depth))
+         for( j in 1:length(frame)){
+             kSmooth[i] <- kSmooth[i] + kernal( (y - frame[j])/h )
+         }
+         kSmooth[i] <- kSmooth[i] / (length(frame)*h)
+     }
+     kSmooth
+ }
> 
> depth <-  100
> 
> start <- min( sons$V5, daughters$V5 )
> end <- max( sons$V5, daughters$V5 )
> 
> 
> sonEDF <- GenerateEDF( depth, sons$V5, start, end )
> daughterEDF <- GenerateEDF( depth, daughters$V5, start, end )
> 
> pdf( "DaugherSonEDFs.pdf" )
> inches <-  numeric( (end-start)*depth )
> for( i in 1:length(inches)){
+     inches[i] <- start + i/depth + 60
+ }
> 
> plot( x=inches, y=sonEDF, type="l", col="blue" )
> lines( x=inches,y=daughterEDF, col="pink")
> legend( 70,.2, legend=c("Sons","Daughters"), lty = c(1,1) , col=c("blue","pink"))
> dev.off()
null device 
          1 
> 
> fatherEDF <- GenerateEDF( depth, fathers$V2, start, end )
> 
> pdf( "FatherSonEDF.pdf" )
> plot( x = inches, y=fatherEDF, type="l", col="blue" )
> lines(x=inches,y=sonEDF,col="red")
> legend( 60,1, legend=c("Fathers","Sons"), lty = c(1,1) , col=c("blue","red"))
> dev.off()
null device 
          1 
> 
> start <- min( sons$V5, daughters$V5 ) - 10
> end <- max( sons$V5, daughters$V5 ) + 10
> 
> sonHist <- GenerateKernalSmoothHistogram( depth, sons$V5, start, end, NormalKernal )
> daughterHist <- GenerateKernalSmoothHistogram( depth, daughters$V5, start, end, NormalKernal )
> fatherHist <- GenerateKernalSmoothHistogram( depth, fathers$V2, start, end, NormalKernal )
> inches <-  numeric( (end-start)*depth )
> for( i in 1:length(inches)){
+     inches[i] <- start + i/depth + 60
+ }
> 
> pdf( "Hists.pdf" )
> plot( x=inches,y=fatherHist, type="l", col="blue" )
> lines(x=inches,y=sonHist, col="red" )
> legend( 80,.15, legend=c("Fathers","Sons"), lty = c(1,1) , col=c("blue","red"))
> dev.off()
null device 
          1 
> 
> proc.time()
   user  system elapsed 
  6.316   0.224   6.332 
